package codec

import (
	"reflect"
	"testing"
)

var nalu []byte = []byte{0x00, 0x00, 0x00, 0x01, 0x40, 0x01, 0x0C, 0x01,
	0xFF, 0xFF, 0x01, 0x60, 0x00, 0x00, 0x03, 0x00,
	0x90, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00,
	0x78, 0x99, 0x98, 0x09}

var result []byte = []byte{0x00, 0x00, 0x00, 0x01, 0x40, 0x01, 0x0C, 0x01,
	0xFF, 0xFF, 0x01, 0x60, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x78, 0x99, 0x98, 0x09}

func TestCovertRbspToSodb(t *testing.T) {
	type args struct {
		rbsp []byte
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{name: "test", args: args{
			rbsp: nalu,
		}, want: result},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := CovertRbspToSodb(tt.args.rbsp); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CovertRbspToSodb() = %x, want %x", got, tt.want)
			}
		})
	}
}
